#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<signal.h>
#include"sem.h"
#define len 7
#define MAX 10
int fds[MAX];
void Init_fds()
{
	int i = 0;
	for(; i < MAX; ++i)
	{
		fds[i] = -1;
	}
}

int Add_fds(int c)
{
	int i = 0;
	for(; i < MAX; ++i)
	{
		if(fds[i] == -1)
		{
			fds[i] = c;																	return 1;
		}
	}
	if(i == MAX)
	{
		return 0;
	}
}

void Del_fds(int i)
{
	for(; i < MAX - 1; ++i)
	{
		fds[i] = fds[i + 1];
		if(fds[i+1] == -1)
		{
			break;
		}
	}
	fds[MAX - 1] = -1;
}

int Get_fds()
{
	int i = 0, c = -1;
	for(; i < MAX; ++i)
	{
		if(fds[i] != -1)
		{
			c = fds[i];
			Del_fds(i);
			break;
		}
	}
	return c;
}
void fun()
{
	wait(NULL);
}

int main()
{
	Init_fds();
	signal(SIGCHLD, fun);
	int sockfd = socket(AF_INET, SOCK_STREAM, 0);
	assert(sockfd != -1);

	struct sockaddr_in ser, cli;
	memset(&ser, 0, sizeof(ser));
	ser.sin_family = AF_INET;
	ser.sin_port = htons(6500);
	ser.sin_addr.s_addr = inet_addr("192.168.52.130");

	int b = bind(sockfd, (struct sockaddr*)&ser, sizeof(ser));
	assert(b != -1);

	listen(sockfd, 5);
   	 int i = 0;
    	pid_t pid;
	for(; i < len; i++)
	{
	  pid = fork();
	  if(pid==0 || pid==-1)
	  {
		  break;
	  }
	}
	sem_get();
	if(pid == -1)
	{
		printf("fork error!");
		exit(0);
	}
 
	while(1)
	{
		if(pid == 0)
		{
		socklen_t lenn = sizeof(cli);
		int c = accept(sockfd, (struct sockaddr*)&cli, &lenn);
		printf("link\n");
		if(c < 0)
		{
			printf("accept error!\n");
			continue;
		}

		if(!Add_fds(c))
		{
			send(c, "please wait!", strlen("please wait!"), 0);
			close(c);
			continue;
		}
        
		sem_v();

		while(1)
		{
			sem_get();
			sem_p();
			int cc = Get_fds();
			while(1)
			{
				char buff[128] = {0};
			int n = recv(cc, buff, 127, 0);
			if(n <= 0)
			{
				close(cc);
				break;
			}
			printf("%s\n ", buff);
			send(cc, "OK", 2, 0);
	     	}
    	}
		}
		}
  }



